name: PR Summary Export

on:
  push:
    branches: ['**']
  workflow_dispatch:
    inputs:
      start_date:
        description: 'Start date (YYYY-MM-DD). Optional.'
        required: false
      end_date:
        description: 'End date (YYYY-MM-DD). Optional.'
        required: false
  schedule:
    # daily at 20:00 IST (14:30 UTC)
    - cron: '30 14 * * *'

permissions:
  contents: read

jobs:
  run-summary:
    runs-on: ubuntu-latest
    env:
      # place artifacts into workspace (safe cross-OS)
      OUT_DIR: ${{ github.workspace }}/artifacts
      # PER_PAGE can be overridden by workflow env if needed
      PER_PAGE: 100

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          # fetch full history (if you later want to use git data)
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pandas python-dotenv openpyxl

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pandas python-dotenv

      - name: Provide START/END environment (from manual inputs)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo "START_DATE=${{ github.event.inputs.start_date }}" >> $GITHUB_ENV
          echo "END_DATE=${{ github.event.inputs.end_date }}" >> $GITHUB_ENV

      - name: Dump debug env
        # Helpful: prints key environment values so you can verify the script sees the right repo and token
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}"
          echo "GITHUB_REPOSITORY_OWNER: ${GITHUB_REPOSITORY_OWNER}"
          echo "GITHUB_REF: ${GITHUB_REF}"
          echo "Runner workspace: ${GITHUB_WORKSPACE}"
          echo "OUT_DIR (env): $OUT_DIR"
          # Print token length only (don't print the token itself)
          echo "GITHUB_TOKEN length: ${#GITHUB_TOKEN}"
          # show artifact dir contents (if any)
          ls -la "$OUT_DIR" || true

      - name: Run PR summary script
        env:
          # Use the Actions-provided token (has repo read permissions in most cases)
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Let the script detect repo via GITHUB_REPOSITORY, but still provide OUT_DIR/PER_PAGE
          OUT_DIR: ${{ env.OUT_DIR }}
          PER_PAGE: ${{ env.PER_PAGE }}
          # START/END may have been injected into GITHUB_ENV earlier; keep them available
          START_DATE: ${{ env.START_DATE }}
          END_DATE: ${{ env.END_DATE }}
        run: |
          python test.py

      - name: Find output file
        id: findout
        run: |
          # look for the most recent xlsx under OUT_DIR
          FILE=$(ls -t "$OUT_DIR"/*.xlsx 2>/dev/null | head -n1 || true)
          if [ -n "$FILE" ]; then
            echo "output_file=$FILE" >> $GITHUB_OUTPUT
            echo "Found output: $FILE"
          else
            # fallback: attempt to find any xlsx in workspace (in case OUT_DIR differs)
            FILE2=$(ls -t $GITHUB_WORKSPACE/*.xlsx 2>/dev/null | head -n1 || true)
            if [ -n "$FILE2" ]; then
              echo "output_file=$FILE2" >> $GITHUB_OUTPUT
              echo "Found output in workspace: $FILE2"
            else
              echo "output_file=" >> $GITHUB_OUTPUT
              echo "No output file found in $OUT_DIR or workspace"
              exit 0
            fi
          fi

      - name: Upload Excel artifact
        if: steps.findout.outputs.output_file != ''
        uses: actions/upload-artifact@v4
        with:
          name: pr-summary-excel
          path: ${{ steps.findout.outputs.output_file }}
